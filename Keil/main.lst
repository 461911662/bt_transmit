C51 COMPILER V9.52.0.0   MAIN                                                              05/30/2019 12:42:20 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\main.c LARGE OPTIMIZE(9,SIZE) BROWSE NOAREGS INTVECTOR(0X0300) IN
                    -CDIR(..\include;..\BLE Service) DEBUG OBJECTEXTEND PRINT(.\main.lst) TABS(2) OBJECT(.\main.obj)

line level    source

   1          /*****************************************************************************
   2          **               AMICCOM Electronics Corporation Document                   **
   3          **          Copyright (c) 2011-2015 AMICCOM Electronics Corporation         **
   4          **                                                                          **
   5          **      A3,1F,No.1, Li-Hsin 1th Road, Science_Based Industrid Park,         **
   6          **                       Hsin_Chu City, 300, Taiwan, ROC.                   **
   7          **                 Tel: 886-3-5785818   Fax: 886-3-5785819                  **
   8          **         E-mail:info@amiccom.com.tw  http: //www.amiccom.com.tw           **
   9          *****************************************************************************/
  10          #include "define.h"
  11          #include "A8107.h"
  12          #include "LibFunction.h"
  13          #include "mcufunction.h"
  14          #include "IAP.h"
  15          #include "servicegen.h"
  16          #include "OTA.h"
  17          
  18          uint8_t fast_adv;
  19          /*******************************************************************
  20           *
  21           * main - main function
  22           * Description:
  23           *      The function is the system entry point. The whole system is
  24           *      start from here.
  25           *
  26           ******************************************************************/
  27          void main(void)
  28          {
  29   1          ADV_InitDef ADV_InitStructure;
  30   1      
  31   1          uint8_t xdata   DataLen;
  32   1          uint8_t xdata   *ptrChar = NULL;
  33   1          uint8_t xdata   UpdateOTASpeed;
  34   1          uint8_t xdata   Temp;
  35   1      
  36   1          while(~P0_4);
  37   1      
  38   1          InterruptDisable();
  39   1          InitMCU();
  40   1          internalRC = 0; //0 :Using External RC 32.768KHz ; 1:Using internal RC 32.000KHz
  41   1      
  42   1          InitCrystalCL(0x32);  //AMICCOM CrystalCL 0x32(MD8107-A05)(18pF) / 0x14(MD8107-A06)(12pF) / 0x0D(9pF)
  43   1      
  44   1          Temp = InitRF();
  45   1          if(Temp != SUCCESS) {
  46   2              /*******Calibration Error*******/
  47   2          }
  48   1      
  49   1          IAP_Initialize();
  50   1          OTA_Initialize();
  51   1      
  52   1          InitBLE();
  53   1          BLE_SetTxPower(6); //level 0 ~ 7 : 0 => -17dBm; 1 => -15dBm; 2 => -10dBm; 3 => -5dBm; 4 => 0dBm; 5 => 
             -FCC/CE Setting; 6 => 4dBm; 7 => 7dBm
C51 COMPILER V9.52.0.0   MAIN                                                              05/30/2019 12:42:20 PAGE 2   

  54   1          InterruptEnable();
  55   1      
  56   1          RF_Timer500ms(DISABLE);
  57   1      
  58   1          fast_adv = 1;
  59   1      
  60   1          while(1)
  61   1          {
  62   2              OTA_Process();
  63   2      
  64   2              /* User Can Add Code */
  65   2              if(ble_state == STANDBY_STATE)
  66   2              {
  67   3                  if(RF_Get_Partial_InitRF_Result() != SUCCESS)
  68   3                  {
  69   4                      /*******Calibration Error*******/
  70   4      
  71   4                      /*******************************/
  72   4                  }
  73   3      
  74   3                  if(fast_adv)
  75   3                  {
  76   4                      fast_adv = 0;
  77   4      
  78   4                      ADV_InitStructure.ADV_Timing = 8; // ADV Interval = (20ms + 0.625ms*ADV_Timing) = 25 ms
  79   4                      ADV_InitStructure.ADV_TO = 4800;  // ADV Timeout = ADV Interval * ADV_TO = 25ms*4800 = 120
             - sec
  80   4                      ADV_InitStructure.ADV_Channel = (TE_ADVCHANNEL)(ADV_CH37 | ADV_CH38 | ADV_CH39);
  81   4                      ADV_InitStructure.ADV_Type = ADV_IND;
  82   4                      ADV_InitStructure.ADV_RndEnable = DISABLE;
  83   4                      ADV_InitStructure.ADV_TOEnable = ENABLE;
  84   4                      ADV_InitStructure.MACAddr_Type = ADDR_PUBLIC;
  85   4                      ADV_InitStructure.ADV_Run = ENABLE;
  86   4                      BLE_ADV_Cmd(&ADV_InitStructure);
  87   4                  }
  88   3                  else
  89   3                  {
  90   4                      ADV_InitStructure.ADV_Timing = 128; // ADV Interval = (20ms + 0.625ms*ADV_Timing) = 100 ms
  91   4                      ADV_InitStructure.ADV_TO = 1500;  // ADV Timeout = ADV Interval * ADV_TO = 100ms*1500 = 15
             -0 sec
  92   4                      ADV_InitStructure.ADV_Channel = (TE_ADVCHANNEL)(ADV_CH37 | ADV_CH38 | ADV_CH39);
  93   4                      ADV_InitStructure.ADV_Type = ADV_IND;
  94   4                      ADV_InitStructure.ADV_RndEnable = DISABLE;
  95   4                      ADV_InitStructure.ADV_TOEnable = DISABLE;
  96   4                      ADV_InitStructure.MACAddr_Type = ADDR_PUBLIC;
  97   4                      ADV_InitStructure.ADV_Run = ENABLE;
  98   4                      BLE_ADV_Cmd(&ADV_InitStructure);
  99   4                  }
 100   3              }
 101   2              else if(ble_state == ADV_STATE)
 102   2              {
 103   3                  UpdateOTASpeed = ENABLE;
 104   3      
 105   3                  if(ble_state == ADV_STATE)
 106   3                  {
 107   4                      BLE_AutoPwrDown_Enable();
 108   4                  }
 109   3              }
 110   2              else if(ble_state == CONNECT_ESTABLISH_STATE)
 111   2              {
 112   3                  fast_adv = 1;
 113   3      
C51 COMPILER V9.52.0.0   MAIN                                                              05/30/2019 12:42:20 PAGE 3   

 114   3                  if (UpdateOTASpeed)
 115   3                  {
 116   4                      Temp = (uint8_t)OTA_UpdataSpeed();
 117   4      
 118   4                      if ((OTA_SUCCESSFUL == Temp) || (OTA_COUNT_MAX == Temp))
 119   4                          UpdateOTASpeed = DISABLE;
 120   4                  } /* Changing OTA download speeds */
 121   3      
 122   3                  if (BLE_writeEventFlag)
 123   3                  {
 124   4                      ptrChar = BLE_GetWriteEvent();
 125   4                      DataLen = BLE_GetWriteEvent_Length();
 126   4      
 127   4                      if (ptrChar == &att_HDL_OTA_OTA_DATA)
 128   4                      {
 129   5                          OTA_SetReceiveData((uint16_t)att_HDL_OTA_OTA_DATA, DataLen);
 130   5                          OTA_Process();
 131   5                      } /* Characteristic Data below the OTA Service */
 132   4                      else if (ptrChar == &att_HDL_OTA_OTA_CMD_CONTROL_POINT)
 133   4                      {
 134   5                          OTA_SetReceiveData((uint16_t)att_HDL_OTA_OTA_CMD_CONTROL_POINT, DataLen);
 135   5                          OTA_Process();
 136   5                      } /* Characteristic Command below the OTA Service */
 137   4                      else
 138   4                      {
 139   5      
 140   5                      }
 141   4                  }
 142   3      
 143   3                  if(ble_state == CONNECT_ESTABLISH_STATE)
 144   3                  {
 145   4                      BLE_AutoPwrDown_Enable();
 146   4                  }
 147   3              }
 148   2          }
 149   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    312    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
