C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MAIN_DEMO
OBJECT MODULE PLACED IN .\main_demo.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\main_demo.c LARGE OPTIMIZE(9,SIZE) BROWSE NOAREGS INTVECTOR(0X030
                    -0) INCDIR(..\include;..\BLE Service) DEBUG OBJECTEXTEND PRINT(.\main_demo.lst) TABS(2) OBJECT(.\main_demo.obj)

line level    source

   1          /*****************************************************************************
   2          **               AMICCOM Electronics Corporation Document                   **
   3          **          Copyright (c) 2011-2015 AMICCOM Electronics Corporation         **
   4          **                                                                          **
   5          **      A3,1F,No.1, Li-Hsin 1th Road, Science_Based Industrid Park,         **
   6          **                       Hsin_Chu City, 300, Taiwan, ROC.                   **
   7          **                 Tel: 886-3-5785818   Fax: 886-3-5785819                  **
   8          **         E-mail:info@amiccom.com.tw  http: //www.amiccom.com.tw           **
   9          *****************************************************************************/
  10          #include "define.h"
  11          #include "A8107.h"
  12          #include "LibFunction.h"
  13          #include "mcufunction.h"
  14          #include "IAP.h"
  15          #include "servicegen.h"
  16          #include "OTA.h"
  17          
  18          uint8_t xdata auth_req;
  19          uint8_t xdata init_req;
  20          uint8_t xdata index;
  21          uint8_t xdata auth_init_finish;
  22          uint8_t xdata scale_index;
  23          uint8_t xdata KeyWakeup;
  24          uint8_t xdata sendscaledata;
  25          uint8_t xdata waitpacket;
  26          uint8_t fast_adv;
  27          
  28          #ifdef _PROFILE_TAOBAO_
              uint8_t xdata sendscaledata;
              uint8_t xdata scalebuf[10];
              uint16_t xdata weightvalue;
              uint32_t xdata datevalue;
              #endif
  34          
  35          #ifdef _PROFILE_HOGP_
              #ifdef _PROFILE_HOGP_MOUSE_
              uint8_t xdata HID_report_MS_key_temp;
              uint8_t xdata mousedata;
              #endif
              #ifdef _PROFILE_HOGP_KEYBOARD_
              uint8_t xdata HID_report_KB_key_temp;
              uint8_t xdata presskey07;
              #endif
              #ifdef _PROFILE_HOGP_COMSUMER_
              uint8_t xdata presskey06;
              #endif
              #endif
  48          
  49          
  50          #ifdef _PROFILE_HOGP_
              #ifdef _PROFILE_HOGP_MOUSE_
              void MouseDemo(void);
              #endif
              #endif
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 2   

  55          
  56          #ifdef _PROFILE_TAOBAO_
              uint8_t toascii(uint32_t in, uint8_t unit);
              void Prcss_Weight(void);
              #endif
  60          
  61          #ifdef _PROFILE_HOGP_
              #ifdef _PROFILE_HOGP_COMSUMER_
              #define HDL_HIDS_REPORT_TAB_CSKEY_L                             0
              #define HDL_HIDS_REPORT_TAB_CSKEY_H                             1
              #endif
              
              #ifdef _PROFILE_HOGP_MOUSE_
              #define HDL_HIDS_REPORT_TAB_KEY_L_R                             0
              #define HDL_HIDS_REPORT_TAB_DIR_L_R_L                           1
              #define HDL_HIDS_REPORT_TAB_DIR_L_R_H                           2
              #define HDL_HIDS_REPORT_TAB_DIR_U_D_L                           3
              #define HDL_HIDS_REPORT_TAB_DIR_U_D_H                           4
              #define HDL_HIDS_REPORT_TAB_ROL_U_D                             5
              #endif
              
              #ifdef _PROFILE_HOGP_KEYBOARD_
              #define HDL_HIDS_REPORT_TAB_KEY_CTRL                            0
              #define HDL_HIDS_REPORT_TAB_KEY_DATA0                           2
              #define HDL_HIDS_REPORT_TAB_KEY_DATA1                           3
              #define HDL_HIDS_REPORT_TAB_KEY_DATA2                           4
              #define HDL_HIDS_REPORT_TAB_KEY_DATA3                           5
              #define HDL_HIDS_REPORT_TAB_KEY_DATA4                           6
              #define HDL_HIDS_REPORT_TAB_KEY_DATA5                           7
              #endif
              #endif
  86          
  87          #ifdef _PROFILE_HOGP_
              #ifdef _PROFILE_HOGP_COMSUMER_
              const uint8_t code HID_RPT_CS_KEY_DEMO[][2] =
              {
                  {0xE9, 0x00,},  //vol+
                  {0xEA, 0x00,},  //vol-
                  {0xE2, 0x00,},  //Mute
                  {0xB0, 0x00,},  //Play
                  {0xB1, 0x00,},  //Pause
                  //{0xB2, 0x00,},  //Record
                  {0xB3, 0x00,},  //Fast forward
                  {0xB4, 0x00,},  //Rewind
                  {0xB5, 0x00,},  //Scan next track
                  {0xB6, 0x00,},  //Scan previous track
                  {0xB7, 0x00,},  //Stop
                  {0xB8, 0x00,},  //Eject
                  {0x8A, 0x01,},  //Email reader
                  {0x96, 0x01,},  //Internet browser
                  {0x9E, 0x01,},  //Terminal lock/screensaver
                  {0xC6, 0x01,},  //Research/search browser
                  {0x2D, 0x02,},  //Zoom in
              };
              #endif
              #endif
 111          
 112          #ifdef _PROFILE_TAOBAO_
              const uint8_t code auth_data_taobao[60]=
              {
                  0x03, 0x00, 0x26, 0xFE, 0x01, 0x00, 0x26, 0x27,
                  0x11, 0x00, 0x01, 0x0A, 0x00, 0x12, 0x10, 0x8A,
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 3   

                  0xB7, 0x40, 0x66, 0x48,
                  0x7C, 0x9A, 0xDE, 0x17, 0x5B, 0x80, 0xD7, 0xD7,
                  0x0C, 0x83, 0x0B, 0x18, 0x83, 0x80, 0x04, 0x20,
                  0x01, 0x28, 0x01, 0x32,
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                  0x00, 0x00, 0x00, 0x00
              };
              
              const uint8_t code init_data_taobao[20]=
              {
                  0x03, 0x00, 0x0D, 0xFE, 0x01, 0x00, 0x0D, 0x27,
                  0x13, 0x00, 0x02, 0x0A, 0x00, 0x12, 0x01, 0x7F,
                  0x00, 0x00, 0x00, 0x00
              };
              
              const uint8_t code send_test_data_taobao[60]=
              {
                  0x03, 0x00, 0x36, 0xFE, 0x01, 0x00, 0x36, 0x27,
                  0x12, 0x00, 0x03, 0x0A, 0x00, 0x12, 0x2A, 0x43,
                  0x43, 0x30, 0x37, 0x39,
                  0x36, 0x37, 0x34, 0x32, 0x34, 0x45, 0x46, 0x45,
                  0x39, 0x33, 0x31, 0x33, 0x30, 0x33, 0x38, 0x32,
                  0x30, 0x30, 0x30, 0x34,
                  0x31, 0x33, 0x30, 0x33, 0x31, 0x33, 0x36, 0x34,
                  0x31, 0x33, 0x30, 0x33, 0x30, 0x33, 0x31, 0x30,
                  0x38, 0x00, 0x00, 0x00
              };
              
              const uint8_t code scale_data_init[10]=
              {
                  0x01, 0x30, 0x30, 0x30, 0x30, 0x42, 0x46, 0x38,
                  0x33, 0x43,
              };
              
              static const char ascii[] = "0123456789ABCDEF";
              
              const uint8_t code send_scale_data[60]=
              {
                  0x03, 0x00, 0x34, 0xFE, 0x01, 0x00, 0x34, 0x27,
                  0x12, 0x00, 0x00, 0x0A, 0x00, 0x12, 0x26, 0x43,
                  0x33, 0x46, 0x45, 0x30,
                  0x30, 0x30, 0x36, 0x45, 0x30, 0x35, 0x35, 0x44,
                  0x36, 0x42, 0x34, 0x43, 0x41, 0x46, 0x46, 0x30,
                  0x30, 0x30, 0x30, 0x30,
                  0x30, 0x46, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30,
                  0x30, 0x30, 0x30, 0x30, 0x39, 0x18, 0x00, 0x00,
                  0x00, 0x00, 0x00, 0x00
              };
              #endif
 167          
 168          #ifdef _PROFILE_WECHAT_
              const uint8_t code auth_data_wechat[26]=
              {
                  0xFE, 0x01, 0x00, 0x1A, 0x27, 0x11, 0x00, 0x01,
                  0x0A, 0x00, 0x18, 0x80, 0x80, 0x04, 0x20, 0x01,
                  0x28, 0x02, 0x3A, 0x06, 0xD0, 0x39, 0x72, 0xA5,
                  0xEF, 0x24
              };
              
              const uint8_t code init_data_wechat[19]=
              {
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 4   

                  0xFE, 0x01, 0x00, 0x13, 0x27, 0x13, 0x00, 0x02,
                  0x0A, 0x00, 0x1A, 0x04, 0x30, 0x37, 0x31, 0x35,
                  0x12, 0x01, 0x41
              };
              
              const uint8_t code send_test_data_wechat[19]=
              {
                  0xFE, 0x01, 0x00, 0x13, 0x27, 0x12, 0x00, 0x02,
                  0x0A, 0x00, 0x1A, 0x04, 0x30, 0x37, 0x31, 0x35,
                  0x12, 0x01, 0x41
              };
              
              #ifdef _PROFILE_WECHAT_SIMPLE_MODE_
              const uint8_t code current_step_data[4] =
              {
                  0x01, 0x10, 0x27, 0x00
              };
              
              const uint8_t code current_total_data[10]=
              {
                  0x07, 0x10, 0x27, 0x00, 0x70, 0x17, 0x00, 0x00,
                  0x22, 0x33
              };
              
              const uint8_t code target_data[19]=
              {
                  0xFE, 0x01, 0x00, 0x13, 0x27, 0x12, 0x00, 0x02,
                  0x0A, 0x00, 0x1A, 0x04, 0x30, 0x37, 0x31, 0x35,
                  0x12, 0x01, 0x41
              };
              #endif
              #endif
 211          /*******************************************************************
 212           *
 213           * main - main function
 214           * Description:
 215           *      The function is the system entry point. The whole system is
 216           *      start from here.
 217           *
 218           ******************************************************************/
 219          void main(void)
 220          {
 221   1          ADV_InitDef ADV_InitStructure;
 222   1      
 223   1          uint8_t xdata   DataLen;
 224   1          uint8_t xdata   *ptrChar = NULL;
 225   1          uint8_t xdata   UpdateOTASpeed;
 226   1          uint8_t xdata   Temp;
 227   1          uint8_t xdata   result, i;
 228   1          uint16_t xdata  waitpacket_tmp = 0, waitpacket_tmp1 = 0, waitpacket_tmp2 = 0;
 229   1      
 230   1          while(~P0_4);
 231   1      
 232   1          InterruptDisable();
 233   1          InitMCU();
 234   1          internalRC = 0; //0 :Using External RC 32.768KHz ; 1:Using internal RC 32.000KHz
 235   1      
 236   1          InitCrystalCL(0x32);  //AMICCOM CrystalCL 0x32(MD8107-A05)(18pF) / 0x14(MD8107-A06)(12pF) / 0x0D(9pF)
 237   1      
 238   1          Temp = InitRF();
 239   1          if(Temp != SUCCESS) {
 240   2              /*******Calibration Error*******/
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 5   

 241   2          }
 242   1      
 243   1          IAP_Initialize();
 244   1          OTA_Initialize();
 245   1      
 246   1          InitBLE();
 247   1          BLE_SetTxPower(6); //level 0 ~ 7 : 0 => -17dBm; 1 => -15dBm; 2 => -10dBm; 3 => -5dBm; 4 => 0dBm; 5 => 
             -FCC/CE Setting; 6 => 4dBm; 7 => 7dBm
 248   1          InterruptEnable();
 249   1      
 250   1          RF_Timer500ms(ENABLE);
 251   1      
 252   1      #ifdef _PROFILE_TAOBAO_
                  for(i=0;i<10;i++)
                      scalebuf[i]=scale_data_init[i];
              
                  weightvalue=0;
                  datevalue=559240;
                  datevalue=788888;
              #endif
 260   1      
 261   1          fast_adv = 1;
 262   1      
 263   1          while(1)
 264   1          {
 265   2              OTA_Process();
 266   2      
 267   2              /* User Can Add Code */
 268   2      
 269   2              if(ble_state == STANDBY_STATE)
 270   2              {
 271   3                  if(RF_Get_Partial_InitRF_Result() != SUCCESS)
 272   3                  {
 273   4                      /*******Calibration Error*******/
 274   4      
 275   4                      /*******************************/
 276   4                  }
 277   3      
 278   3                  if(fast_adv)
 279   3                  {
 280   4                      fast_adv = 0;
 281   4      
 282   4                      ADV_InitStructure.ADV_Timing = 8; // ADV Interval = (20ms + 0.625ms*ADV_Timing) = 25 ms
 283   4                      ADV_InitStructure.ADV_TO = 4800;  // ADV Timeout = ADV Interval * ADV_TO = 25ms*4800 = 120
             - sec
 284   4                      ADV_InitStructure.ADV_Channel = (TE_ADVCHANNEL)(ADV_CH37 | ADV_CH38 | ADV_CH39);
 285   4                      ADV_InitStructure.ADV_Type = ADV_IND;
 286   4                      ADV_InitStructure.ADV_RndEnable = DISABLE;
 287   4                      ADV_InitStructure.ADV_TOEnable = ENABLE;
 288   4                      ADV_InitStructure.MACAddr_Type = ADDR_PUBLIC;
 289   4                      ADV_InitStructure.ADV_Run = ENABLE;
 290   4                      BLE_ADV_Cmd(&ADV_InitStructure);
 291   4                  }
 292   3                  else
 293   3                  {
 294   4                      ADV_InitStructure.ADV_Timing = 128; // ADV Interval = (20ms + 0.625ms*ADV_Timing) = 100 ms
 295   4                      ADV_InitStructure.ADV_TO = 1500;  // ADV Timeout = ADV Interval * ADV_TO = 20ms*1500 = 150
             - sec
 296   4                      ADV_InitStructure.ADV_Channel = (TE_ADVCHANNEL)(ADV_CH37 | ADV_CH38 | ADV_CH39);
 297   4                      ADV_InitStructure.ADV_Type = ADV_IND;
 298   4                      ADV_InitStructure.ADV_RndEnable = DISABLE;
 299   4                      ADV_InitStructure.ADV_TOEnable = DISABLE;
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 6   

 300   4                      ADV_InitStructure.MACAddr_Type = ADDR_PUBLIC;
 301   4                      ADV_InitStructure.ADV_Run = ENABLE;
 302   4                      BLE_ADV_Cmd(&ADV_InitStructure);
 303   4                  }
 304   3      
 305   3      #ifdef _PROFILE_HOGP_
              #ifdef _PROFILE_HOGP_MOUSE_
                          HID_report_MS_key_temp = 0x00;
                          mousedata = 0;
              #endif
              #ifdef _PROFILE_HOGP_KEYBOARD_
                          presskey07 = 0;
              #endif
              #ifdef _PROFILE_HOGP_COMSUMER_
                          presskey06 = 0;
              #endif
              #endif
 317   3      
 318   3      #ifdef _PROFILE_WECHAT_
              #ifdef _PROFILE_WECHAT_SIMPLE_MODE_
                          for(i=0;i<10;i++)
                              att_HDL_WECHAT_SIMPLEMODE_DATRWI[i] = current_total_data[i];
                          att_HDL_WECHAT_SIMPLEMODE_DATRWI[20] = 10;
              #endif
              #endif
 325   3                  auth_req = FAIL;
 326   3                  init_req = FAIL;
 327   3                  auth_init_finish = FAIL;
 328   3                  index = 0;
 329   3                  scale_index = 0;
 330   3                  KeyWakeup = 0;
 331   3                  sendscaledata = FAIL;
 332   3                  waitpacket=0;
 333   3              }
 334   2              else if(ble_state == ADV_STATE)
 335   2              {
 336   3                  UpdateOTASpeed = ENABLE;
 337   3      
 338   3                  if(ble_state == ADV_STATE)
 339   3                  {
 340   4                      BLE_AutoPwrDown_Enable();
 341   4                  }
 342   3              }
 343   2              else if(ble_state == CONNECT_ESTABLISH_STATE)
 344   2              {
 345   3                  fast_adv = 1;
 346   3      
 347   3                  if (UpdateOTASpeed)
 348   3                  {
 349   4                      Temp = (uint8_t)OTA_UpdataSpeed();
 350   4      
 351   4                      if ((OTA_SUCCESSFUL == Temp) || (OTA_COUNT_MAX == Temp))
 352   4                          UpdateOTASpeed = DISABLE;
 353   4                  } /* Changing OTA download speeds */
 354   3      
 355   3                  if (BLE_writeEventFlag)
 356   3                  {
 357   4                      ptrChar = BLE_GetWriteEvent();
 358   4                      DataLen = BLE_GetWriteEvent_Length();
 359   4      
 360   4                      if (ptrChar == &att_HDL_OTA_OTA_DATA)
 361   4                      {
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 7   

 362   5                          OTA_SetReceiveData((uint16_t)att_HDL_OTA_OTA_DATA, DataLen);
 363   5                          OTA_Process();
 364   5                      } /* Characteristic Data below the OTA Service */
 365   4                      else if (ptrChar == &att_HDL_OTA_OTA_CMD_CONTROL_POINT)
 366   4                      {
 367   5                          OTA_SetReceiveData((uint16_t)att_HDL_OTA_OTA_CMD_CONTROL_POINT, DataLen);
 368   5                          OTA_Process();
 369   5                      } /* Characteristic Command below the OTA Service */
 370   4      #ifdef _PROFILE_TAOBAO_
                              else if(ptrChar == &att_HDL_TAOBAO_DATW)
                              {
                                  if(waitpacket==0)
                                  {
                                      if(att_HDL_TAOBAO_DATW[7]==0x4E)
                                      {
                                          waitpacket_tmp1=att_HDL_TAOBAO_DATW[1];
                                          waitpacket_tmp2=att_HDL_TAOBAO_DATW[2];
                                          waitpacket_tmp=((waitpacket_tmp1<<8)|(waitpacket_tmp2))+3;
              
                                          if((waitpacket_tmp%20)==0)
                                              waitpacket=((waitpacket_tmp)/20)-1;
                                          else if((waitpacket_tmp%20)!=0)
                                              waitpacket=((waitpacket_tmp+3)/20);
                                          else
                                              ;
              
                                          switch(att_HDL_TAOBAO_DATW[8])
                                          {
                                              case 0x21:
                                                  auth_req = PASS;
                                                  break;
              
                                              case 0x22:
                                                  auth_init_finish = PASS;
                                                  break;
              
                                              case 0x23:
                                                  init_req = PASS;
                                                  break;
              
                                              default:
                                                  break;
                                          }
                                      }
                                      else
                                           ;
                                  }
                                  else
                                  {
                                      waitpacket--;
                                  }
                              }
              #endif
 415   4      #ifdef _PROFILE_WECHAT_
              #ifndef _PROFILE_WECHAT_SIMPLE_MODE_
                              else if(ptrChar == &att_HDL_WECHAT_DATW)//WeChat
                              {
                                  if(waitpacket==0)
                                  {
                                      if(att_HDL_WECHAT_DATW[4]==0x4E)
                                      {
                                          waitpacket_tmp1=att_HDL_WECHAT_DATW[2];
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 8   

                                          waitpacket_tmp2=att_HDL_WECHAT_DATW[3];
                                          waitpacket_tmp=((waitpacket_tmp1<<8)|(waitpacket_tmp2));
              
                                          if((waitpacket_tmp%20)==0)
                                              waitpacket=((waitpacket_tmp)/20)-1;
                                          else if((waitpacket_tmp%20)!=0)
                                              waitpacket=((waitpacket_tmp)/20);
                                          else
                                              ;
              
                                          switch(att_HDL_WECHAT_DATW[5])
                                          {
                                              case 0x21:
                                                  auth_req = PASS;
                                                  break;
              
                                              case 0x22:
                                                  auth_init_finish = PASS;
                                                  break;
              
                                              case 0x23:
                                                  init_req = PASS;
                                                  break;
              
                                              default:
                                                  break;
                                          }
                                      }
                                      else if(att_HDL_WECHAT_DATW[4]==0x75)
                                      {
                                          waitpacket_tmp1=att_HDL_WECHAT_DATW[2];
                                          waitpacket_tmp2=att_HDL_WECHAT_DATW[3];
                                          waitpacket_tmp=((waitpacket_tmp1<<8)|(waitpacket_tmp2));
              
                                          if((waitpacket_tmp%20)==0)
                                              waitpacket=((waitpacket_tmp)/20)-1;
                                          else if((waitpacket_tmp%20)!=0)
                                              waitpacket=((waitpacket_tmp)/20);
                                          else
                                              ;
              
                                          switch(att_HDL_WECHAT_DATW[5])
                                          {
                                              case 0x31:
                                                  _nop_();
                                                  break;
              
                                              case 0x32:
                                                  _nop_();
                                                  break;
              
                                              case 0x33:
                                                  _nop_();
                                                  break;
              
                                              default:
                                                  break;
                                          }
                                      }
                                      else
                                          ;
                                  }
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 9   

                                  else
                                  {
                                        waitpacket--;
                                  }
                              }
              #else
                              else if(ptrChar == &att_HDL_WECHAT_SIMPLEMODE_DATRWI)//WeChat_Simple
                              {
                                  switch(att_HDL_WECHAT_SIMPLEMODE_DATRWI[0])
                                  {
                                      case 0x01:
                                          result = BLE_SendData(att_HDL_WECHAT_SIMPLEMODE_DATRWI,ATT_HDL_WECHAT_SIMPLEMO
             -DE_DATRWI_INIT,4);
                                          break;
              
                                      case 0x02:
                                          result = BLE_SendData(att_HDL_WECHAT_SIMPLEMODE_DATRWI,ATT_HDL_WECHAT_SIMPLEMO
             -DE_DATRWI_INIT,4);
                                          break;
              
                                      case 0x03:
                                          result = BLE_SendData(att_HDL_WECHAT_SIMPLEMODE_DATRWI,ATT_HDL_WECHAT_SIMPLEMO
             -DE_DATRWI_INIT,7);
                                          break;
              
                                      case 0x04:
                                          result = BLE_SendData(att_HDL_WECHAT_SIMPLEMODE_DATRWI,ATT_HDL_WECHAT_SIMPLEMO
             -DE_DATRWI_INIT,4);
                                          break;
              
                                      case 0x05:
                                          result = BLE_SendData(att_HDL_WECHAT_SIMPLEMODE_DATRWI,ATT_HDL_WECHAT_SIMPLEMO
             -DE_DATRWI_INIT,7);
                                          break;
              
                                      case 0x06:
                                          result = BLE_SendData(att_HDL_WECHAT_SIMPLEMODE_DATRWI,ATT_HDL_WECHAT_SIMPLEMO
             -DE_DATRWI_INIT,7);
                                          break;
              
                                      case 0x07:
                                          result = BLE_SendData(att_HDL_WECHAT_SIMPLEMODE_DATRWI,ATT_HDL_WECHAT_SIMPLEMO
             -DE_DATRWI_INIT,10);
                                          break;
              
                                      default:
                                          break;
                                  }
                              }
              #endif
              #endif
 530   4      #ifdef _PROFILE_USER_DEFINE_01_
 531   4                      else if(ptrChar == &att_HDL_USER_DEFINE_01_DATAW01)
 532   4                      {
 533   5                          if((att_HDL_USER_DEFINE_01_DATAN01_CLIENT_CHARACTERISTIC_CONFIGURATION[0] & GATT_DESCR
             -IPTORS_CLIENT_CHARACTERISTIC_CONFIGURATION_NOTIFICATION) != 0)
 534   5                          {
 535   6                              for(i=0;i<20;i++)
 536   6                                    att_HDL_USER_DEFINE_01_DATAN01[i] = att_HDL_USER_DEFINE_01_DATAW01[i];
 537   6      
 538   6                              result = BLE_SendData(att_HDL_USER_DEFINE_01_DATAN01,ATT_HDL_USER_DEFINE_01_DATAN0
             -1_INIT,5);
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 10  

 539   6      
 540   6                              if(result == SUCCESS)
 541   6                              {
 542   7                                  _nop_();
 543   7                              }
 544   6                              else
 545   6                              {
 546   7                                  _nop_();
 547   7                              }
 548   6                          }
 549   5                      }
 550   4                      else if(ptrChar == &att_HDL_USER_DEFINE_01_DATAW02)
 551   4                      {
 552   5                          if((att_HDL_USER_DEFINE_01_DATAN02_CLIENT_CHARACTERISTIC_CONFIGURATION[0] & GATT_DESCR
             -IPTORS_CLIENT_CHARACTERISTIC_CONFIGURATION_NOTIFICATION) != 0)
 553   5                          {
 554   6                              for(i=0;i<20;i++)
 555   6                                  att_HDL_USER_DEFINE_01_DATAN02[i] = att_HDL_USER_DEFINE_01_DATAW02[i];
 556   6      
 557   6                              result = BLE_SendData(att_HDL_USER_DEFINE_01_DATAN02,ATT_HDL_USER_DEFINE_01_DATAN0
             -2_INIT,5);
 558   6      
 559   6                              if(result == SUCCESS)
 560   6                              {
 561   7                                  _nop_();
 562   7                              }
 563   6                              else
 564   6                              {
 565   7                                  _nop_();
 566   7                              }
 567   6                          }
 568   5                      }
 569   4      #endif
 570   4                      else
 571   4                      {
 572   5      
 573   5                      }
 574   4                  }
 575   3      
 576   3      #ifdef _PROFILE_HOGP_
              #ifdef _PROFILE_HOGP_MOUSE_
                          if(~P3_2)
                          {
                              do{
                                  MouseDemo();
                              }while(~P3_2);
                          }
              #endif
              #ifdef _PROFILE_HOGP_KEYBOARD_
                          if(~P0_7)
                          {
                              if((att_HDL_HIDS_REPORT_KBI_CLIENT_CHARACTERISTIC_CONFIGURATION[0] & GATT_DESCRIPTORS_CLIE
             -NT_CHARACTERISTIC_CONFIGURATION_NOTIFICATION) != 0)
                              {
                                  if((HID_report_KB_key_temp < 0x04)||(HID_report_KB_key_temp >= 0x27))  //a~9
                                  {
                                      HID_report_KB_key_temp = 0x04;
                                  }
                                  else
                                  {
                                      HID_report_KB_key_temp++;
                                  }
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 11  

                                  att_HDL_HIDS_REPORT_KBI[HDL_HIDS_REPORT_TAB_KEY_DATA0] = HID_report_KB_key_temp;
                                  result = BLE_SendData(att_HDL_HIDS_REPORT_KBI,ATT_HDL_HIDS_REPORT_KBI_INIT,ATT_HDL_HID
             -S_REPORT_KBI_INIT[4]);
                                  if(result == SUCCESS)
                                  {
                                      presskey07 = 1;
                                  }
                              }
                          }
                          else
                          {
                              if(presskey07)
                              {
                                  if((att_HDL_HIDS_REPORT_KBI_CLIENT_CHARACTERISTIC_CONFIGURATION[0] & GATT_DESCRIPTORS_
             -CLIENT_CHARACTERISTIC_CONFIGURATION_NOTIFICATION) != 0)
                                  {
                                      att_HDL_HIDS_REPORT_KBI[HDL_HIDS_REPORT_TAB_KEY_DATA0] = 0x00;
                                      result = BLE_SendData(att_HDL_HIDS_REPORT_KBI,ATT_HDL_HIDS_REPORT_KBI_INIT,ATT_HDL
             -_HIDS_REPORT_KBI_INIT[4]);
                                      if(result == SUCCESS)
                                      {
                                          presskey07 = 0;
                                      }
                                  }
                              }
                          }
              #endif
              #ifdef _PROFILE_HOGP_COMSUMER_
                          if(~P0_6)
                          {
                              if((att_HDL_HIDS_REPORT_CSI_CLIENT_CHARACTERISTIC_CONFIGURATION[0] & GATT_DESCRIPTORS_CLIE
             -NT_CHARACTERISTIC_CONFIGURATION_NOTIFICATION) != 0)
                              {
                                  att_HDL_HIDS_REPORT_CSI[HDL_HIDS_REPORT_TAB_CSKEY_L] = HID_RPT_CS_KEY_DEMO[0][0];
                                  att_HDL_HIDS_REPORT_CSI[HDL_HIDS_REPORT_TAB_CSKEY_H] = HID_RPT_CS_KEY_DEMO[0][1];
                                  result = BLE_SendData(att_HDL_HIDS_REPORT_CSI,ATT_HDL_HIDS_REPORT_CSI_INIT,ATT_HDL_HID
             -S_REPORT_CSI_INIT[4]);
                                  if(result == SUCCESS)
                                  {
                                      presskey06 = 1;
                                  }
                              }
                          }
                          else
                          {
                              if(presskey06)
                              {
                                  if((att_HDL_HIDS_REPORT_CSI_CLIENT_CHARACTERISTIC_CONFIGURATION[0] & GATT_DESCRIPTORS_
             -CLIENT_CHARACTERISTIC_CONFIGURATION_NOTIFICATION) != 0)
                                  {
                                      att_HDL_HIDS_REPORT_CSI[HDL_HIDS_REPORT_TAB_CSKEY_L] = 0x00;
                                      att_HDL_HIDS_REPORT_CSI[HDL_HIDS_REPORT_TAB_CSKEY_H] = 0x00;
                                      result = BLE_SendData(att_HDL_HIDS_REPORT_CSI,ATT_HDL_HIDS_REPORT_CSI_INIT,ATT_HDL
             -_HIDS_REPORT_CSI_INIT[4]);
                                      if(result == SUCCESS)
                                      {
                                          presskey06 = 0;
                                      }
                                  }
                              }
                          }
              #endif
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 12  

              #endif
 654   3      
 655   3      #ifdef _PROFILE_TAOBAO_
                          if((att_HDL_TAOBAO_DATI_MEASUREMENT_CLIENT_CHARACTERISTIC_CONFIGURATION[0]&GATT_DESCRIPTORS_CL
             -IENT_CHARACTERISTIC_CONFIGURATION_INDICATION) != 0)
                          {
                              if(auth_req == FAIL && waitpacket == 0)
                              {
                                  switch(index)
                                  {
                                      case 0x00:
                                          for(i=0;i<20;i++)
                                              att_HDL_TAOBAO_DATI[i] = auth_data_taobao[i];
                                          result = BLE_SendData(att_HDL_TAOBAO_DATI,ATT_HDL_TAOBAO_DATI_INIT,20);
                                          if(result == SUCCESS)
                                              index++;
                                          break;
              
                                      case 0x01:
                                          for(i=0;i<20;i++)
                                              att_HDL_TAOBAO_DATI[i] = auth_data_taobao[i+20];
                                          result = BLE_SendData(att_HDL_TAOBAO_DATI,ATT_HDL_TAOBAO_DATI_INIT,20);
                                          if(result == SUCCESS)
                                              index++;
                                          break;
              
                                      case 0x02:
                                          for(i=0;i<20;i++)
                                                att_HDL_TAOBAO_DATI[i] = auth_data_taobao[i+20+20];
                                          result = BLE_SendData(att_HDL_TAOBAO_DATI,ATT_HDL_TAOBAO_DATI_INIT,20);
                                          if(result == SUCCESS)
                                          {
                                              index++;
                                              //auth_req = PASS;
                                          }
                                          break;
              
                                      default:
                                          break;
                                  }
                              }
                              else if(auth_req == PASS && init_req == FAIL && waitpacket == 0)
                              {
                                  switch(index)
                                  {
                                      case 0x03:
                                          for(i=0;i<20;i++)
                                              att_HDL_TAOBAO_DATI[i] = init_data_taobao[i];
              
                                          result = BLE_SendData(att_HDL_TAOBAO_DATI,ATT_HDL_TAOBAO_DATI_INIT,20);
              
                                          if(result == SUCCESS)
                                              index++;
                                          break;
              
                                      default:
                                          break;
                                  }
                              }
                              else if(auth_init_finish == FAIL && waitpacket == 0)
                              {
                                  switch(index)
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 13  

                                  {
                                      case 0x04:
                                          for(i=0;i<20;i++)
                                              att_HDL_TAOBAO_DATI[i] = send_test_data_taobao[i];
                                          result = BLE_SendData(att_HDL_TAOBAO_DATI,ATT_HDL_TAOBAO_DATI_INIT,20);
                                          if(result == SUCCESS)
                                              index++;
                                          break;
              
                                          case 0x05:
                                          for(i=0;i<20;i++)
                                              att_HDL_TAOBAO_DATI[i] = send_test_data_taobao[i+20];
                                          result = BLE_SendData(att_HDL_TAOBAO_DATI,ATT_HDL_TAOBAO_DATI_INIT,20);
                                          if(result == SUCCESS)
                                              index++;
                                          break;
              
                                      case 0x06:
                                          for(i=0;i<20;i++)
                                              att_HDL_TAOBAO_DATI[i] = send_test_data_taobao[i+20+20];
                                          result = BLE_SendData(att_HDL_TAOBAO_DATI,ATT_HDL_TAOBAO_DATI_INIT,20);
                                          if(result == SUCCESS)
                                          {
                                              //auth_init_finish = PASS;
                                               index++;
                                          }
                                          break;
              
                                      default:
                                          break;
                                  }
                              }
                              else
                                  ;
                          }
              #endif
 750   3      #ifdef _PROFILE_WECHAT_
              #ifndef _PROFILE_WECHAT_SIMPLE_MODE_
                          if((att_HDL_WECHAT_DATI_MEASUREMENT_CLIENT_CHARACTERISTIC_CONFIGURATION[0]&GATT_DESCRIPTORS_CL
             -IENT_CHARACTERISTIC_CONFIGURATION_INDICATION) != 0)
                          {
                              if(auth_req == FAIL && waitpacket == 0)
                              {
                                  switch(index)
                                  {
                                      case 0x00:
                                          for(i=0;i<20;i++)
                                              att_HDL_WECHAT_DATI[i] = auth_data_wechat[i];
                                          result = BLE_SendData(att_HDL_WECHAT_DATI,ATT_HDL_WECHAT_DATI_INIT,20);
                                          if(result == SUCCESS)
                                              index++;
                                      break;
              
                                      case 0x01:
                                          for(i=0;i<6;i++)
                                              att_HDL_WECHAT_DATI[i] = auth_data_wechat[i+20];
                                          result = BLE_SendData(att_HDL_WECHAT_DATI,ATT_HDL_WECHAT_DATI_INIT,6);
                                          if(result == SUCCESS)
                                              index++;
                                          break;
              
                                      default:
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 14  

                                          break;
                                  }
                              }
                              else if(auth_req == PASS && init_req == FAIL && waitpacket == 0)
                              {
                                  switch(index)
                                  {
                                      case 0x02:
                                          for(i=0;i<19;i++)
                                              att_HDL_WECHAT_DATI[i] = init_data_wechat[i];
              
                                          result = BLE_SendData(att_HDL_WECHAT_DATI,ATT_HDL_WECHAT_DATI_INIT,19);
                                          if(result == SUCCESS)
                                               index++;
                                      break;
              
                                      default:
                                          break;
                                  }
                              }
                              else if(auth_req == PASS && init_req == PASS && auth_init_finish == FAIL && waitpacket == 
             -0)
                              {
                                  switch(index)
                                  {
                                      case 0x03:
                                          for(i=0;i<19;i++)
                                              att_HDL_WECHAT_DATI[i] = send_test_data_wechat[i];
                                          result = BLE_SendData(att_HDL_WECHAT_DATI,ATT_HDL_WECHAT_DATI_INIT,19);
                                          if(result == SUCCESS)
                                              index++;
                                          break;
              
                                      default:
                                          break;
                                  }
                              }
                              else
                                  ;
                          }
              #else
                          if((att_HDL_WECHAT_SIMPLEMODE_DATRI_CLIENT_CHARACTERISTIC_CONFIGURATION[0]&GATT_DESCRIPTORS_CL
             -IENT_CHARACTERISTIC_CONFIGURATION_INDICATION) != 0)
                          {
                              switch(index)
                              {
                                  case 0x00:
                                      for(i=0;i<4;i++)
                                          att_HDL_WECHAT_SIMPLEMODE_DATRI[i] = current_step_data[i];
                                      result = BLE_SendData(att_HDL_WECHAT_SIMPLEMODE_DATRI,ATT_HDL_WECHAT_SIMPLEMODE_DA
             -TRI_INIT,4);
                                      att_HDL_WECHAT_SIMPLEMODE_DATRI[20]=4;
                                      if(result == SUCCESS)
                                          index++;
                                      break;
              
                                  case 0x01:
                                      for(i=0;i<10;i++)
                                          att_HDL_WECHAT_SIMPLEMODE_DATRI[i] = current_total_data[i];
                                      result = BLE_SendData(att_HDL_WECHAT_SIMPLEMODE_DATRI,ATT_HDL_WECHAT_SIMPLEMODE_DA
             -TRI_INIT,10);
                                      att_HDL_WECHAT_SIMPLEMODE_DATRI[20]=10;
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 15  

                                      if(result == SUCCESS)
                                          index++;
                                      break;
              
                                  default:
                                      break;
                              }
                          }
                          else if((att_HDL_WECHAT_SIMPLEMODE_DATRWI_CLIENT_CHARACTERISTIC_CONFIGURATION[0]&GATT_DESCRIPT
             -ORS_CLIENT_CHARACTERISTIC_CONFIGURATION_INDICATION) != 0)
                          {
                              switch(att_HDL_WECHAT_SIMPLEMODE_DATRWI[0])
                              {
                                  case 0x01:
                                      result = BLE_SendData(att_HDL_WECHAT_SIMPLEMODE_DATRWI,ATT_HDL_WECHAT_SIMPLEMODE_D
             -ATRWI_INIT,4);
                                      if(result == SUCCESS)
                                          _nop_();
                                      break;
              
                                  case 0x02:
                                      result = BLE_SendData(att_HDL_WECHAT_SIMPLEMODE_DATRWI,ATT_HDL_WECHAT_SIMPLEMODE_D
             -ATRWI_INIT,4);
                                      if(result == SUCCESS)
                                          _nop_();
                                          break;
              
                                  case 0x03:
                                      result = BLE_SendData(att_HDL_WECHAT_SIMPLEMODE_DATRWI,ATT_HDL_WECHAT_SIMPLEMODE_D
             -ATRWI_INIT,7);
                                      if(result == SUCCESS)
                                          _nop_();
                                      break;
              
                                  case 0x04:
                                      result = BLE_SendData(att_HDL_WECHAT_SIMPLEMODE_DATRWI,ATT_HDL_WECHAT_SIMPLEMODE_D
             -ATRWI_INIT,4);
                                      if(result == SUCCESS)
                                          _nop_();
                                      break;
              
                                  case 0x05:
                                      result = BLE_SendData(att_HDL_WECHAT_SIMPLEMODE_DATRWI,ATT_HDL_WECHAT_SIMPLEMODE_D
             -ATRWI_INIT,7);
                                      if(result == SUCCESS)
                                          _nop_();
                                      break;
              
                                  case 0x06:
                                      result = BLE_SendData(att_HDL_WECHAT_SIMPLEMODE_DATRWI,ATT_HDL_WECHAT_SIMPLEMODE_D
             -ATRWI_INIT,7);
                                      if(result == SUCCESS)
                                          _nop_();
                                      break;
              
                                  case 0x07:
                                      result = BLE_SendData(att_HDL_WECHAT_SIMPLEMODE_DATRWI,ATT_HDL_WECHAT_SIMPLEMODE_D
             -ATRWI_INIT,10);
                                      if(result == SUCCESS)
                                          _nop_();
                                      break;
              
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 16  

                                  default:
                                      break;
                              }
                          }
              #endif
              #endif
 893   3      
 894   3                  if(auth_init_finish == PASS && waitpacket == 0)
 895   3                  {
 896   4      #ifdef _PROFILE_TAOBAO_
                              Prcss_Weight();
              #endif
 899   4                  }
 900   3      
 901   3                  if(ble_state == CONNECT_ESTABLISH_STATE)
 902   3                  {
 903   4                      BLE_AutoPwrDown_Enable();
 904   4                  }
 905   3              }
 906   2      
 907   2              if(Timer500ms_flag)
 908   2              {
 909   3                  Timer500ms_flag = 0;
 910   3              }
 911   2          }
 912   1      }
 913          
 914          #ifdef _PROFILE_HOGP_
              #ifdef _PROFILE_HOGP_MOUSE_
              void MouseDemo(void)
              {
                  uint8_t result;
              
                  if(mousedata == 0)
                  {
                      if((att_HDL_HIDS_REPORT_MSI_CLIENT_CHARACTERISTIC_CONFIGURATION[0] & GATT_DESCRIPTORS_CLIENT_CHARA
             -CTERISTIC_CONFIGURATION_NOTIFICATION) != 0)
                      {
                          HID_report_MS_key_temp++;
                          if(HID_report_MS_key_temp <= 0x3F)
                          {
                              att_HDL_HIDS_REPORT_MSI[HDL_HIDS_REPORT_TAB_DIR_L_R_L] = 0xFF;
                              att_HDL_HIDS_REPORT_MSI[HDL_HIDS_REPORT_TAB_DIR_L_R_H] = 0xFF;
                              att_HDL_HIDS_REPORT_MSI[HDL_HIDS_REPORT_TAB_DIR_U_D_L] = 0xFF;
                              att_HDL_HIDS_REPORT_MSI[HDL_HIDS_REPORT_TAB_DIR_U_D_H] = 0xFF;
                          }
                          else if(HID_report_MS_key_temp <= 0x7F)
                          {
                              att_HDL_HIDS_REPORT_MSI[HDL_HIDS_REPORT_TAB_DIR_L_R_L] = 0x01;
                              att_HDL_HIDS_REPORT_MSI[HDL_HIDS_REPORT_TAB_DIR_L_R_H] = 0x00;
                              att_HDL_HIDS_REPORT_MSI[HDL_HIDS_REPORT_TAB_DIR_U_D_L] = 0xFF;
                              att_HDL_HIDS_REPORT_MSI[HDL_HIDS_REPORT_TAB_DIR_U_D_H] = 0xFF;
                          }
                          else if(HID_report_MS_key_temp <= 0xBF)
                          {
                              att_HDL_HIDS_REPORT_MSI[HDL_HIDS_REPORT_TAB_DIR_L_R_L] = 0x01;
                              att_HDL_HIDS_REPORT_MSI[HDL_HIDS_REPORT_TAB_DIR_L_R_H] = 0x00;
                              att_HDL_HIDS_REPORT_MSI[HDL_HIDS_REPORT_TAB_DIR_U_D_L] = 0x01;
                              att_HDL_HIDS_REPORT_MSI[HDL_HIDS_REPORT_TAB_DIR_U_D_H] = 0x00;
                          }
                          else if(HID_report_MS_key_temp <= 0xFF)
                          {
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 17  

                              att_HDL_HIDS_REPORT_MSI[HDL_HIDS_REPORT_TAB_DIR_L_R_L] = 0xFF;
                              att_HDL_HIDS_REPORT_MSI[HDL_HIDS_REPORT_TAB_DIR_L_R_H] = 0xFF;
                              att_HDL_HIDS_REPORT_MSI[HDL_HIDS_REPORT_TAB_DIR_U_D_L] = 0x01;
                              att_HDL_HIDS_REPORT_MSI[HDL_HIDS_REPORT_TAB_DIR_U_D_H] = 0x00;
                          }
              
                          result = BLE_SendData(att_HDL_HIDS_REPORT_MSI,ATT_HDL_HIDS_REPORT_MSI_INIT,ATT_HDL_HIDS_REPORT
             -_MSI_INIT[4]);
                          if(result == SUCCESS)
                          {
                              mousedata = 0;
                          }
                          else
                          {
                              mousedata = 1;
                          }
                      }
                  }
                  else
                  {
                      result = BLE_SendData(att_HDL_HIDS_REPORT_MSI,ATT_HDL_HIDS_REPORT_MSI_INIT,ATT_HDL_HIDS_REPORT_MSI
             -_INIT[4]);
                      if(result == SUCCESS)
                      {
                          mousedata = 0;
                      }
                      else
                      {
                          mousedata = 1;
                      }
                  }
              }
              #endif
              #endif
 980          
 981          #ifdef _PROFILE_TAOBAO_
              void Prcss_Weight(void)
              {
                  uint8_t i,result,tmp;
              
                  switch(scale_index)
                  {
                      case 0x00:
                          for(i=0;i<20;i++)
                              att_HDL_TAOBAO_DATI[i] = send_scale_data[i];
              
                          att_HDL_TAOBAO_DATI[10]=scalebuf[0];
                          scalebuf[0]++;
              
                          result = BLE_SendData(att_HDL_TAOBAO_DATI,ATT_HDL_TAOBAO_DATI_INIT,20);
                          if(result == SUCCESS)
                              scale_index++;
                          break;
              
                      case 0x01:
                          for(i=0;i<20;i++)
                              att_HDL_TAOBAO_DATI[i] = send_scale_data[i+20];
                          att_HDL_TAOBAO_DATI[1]=scalebuf[1];
                          att_HDL_TAOBAO_DATI[2]=scalebuf[2];
                          att_HDL_TAOBAO_DATI[3]=scalebuf[3];
                          att_HDL_TAOBAO_DATI[4]=scalebuf[4];
                          att_HDL_TAOBAO_DATI[8]=scalebuf[5];
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 18  

                          att_HDL_TAOBAO_DATI[9]=scalebuf[6];
                          att_HDL_TAOBAO_DATI[10]=scalebuf[7];
                          att_HDL_TAOBAO_DATI[11]=scalebuf[8];
                          att_HDL_TAOBAO_DATI[12]=scalebuf[9];
              
                          result = BLE_SendData(att_HDL_TAOBAO_DATI,ATT_HDL_TAOBAO_DATI_INIT,20);
                          if(result == SUCCESS)
                          {
                              weightvalue = weightvalue+100;
              
                              tmp=toascii(weightvalue,3);
                              scalebuf[1]=tmp;
                              tmp=toascii(weightvalue,2);
                              scalebuf[2]=tmp;
                              tmp=toascii(weightvalue,1);
                              scalebuf[3]=tmp;
                              tmp=toascii(weightvalue,0);
                              scalebuf[4]=tmp;
              
                              datevalue = datevalue+100;
                              tmp=toascii(datevalue,4);
                              scalebuf[5]=tmp;
                              tmp=toascii(datevalue,3);
                              scalebuf[6]=tmp;
                              tmp=toascii(datevalue,2);
                              scalebuf[7]=tmp;
                              tmp=toascii(datevalue,1);
                              scalebuf[8]=tmp;
                              tmp=toascii(datevalue,0);
                              scalebuf[9]=tmp;
              
                              scale_index++;
                          }
                          break;
              
                      case 0x02:
                          for(i=0;i<20;i++)
                              att_HDL_TAOBAO_DATI[i] = send_scale_data[i+20+20];
                          result = BLE_SendData(att_HDL_TAOBAO_DATI,ATT_HDL_TAOBAO_DATI_INIT,20);
                          if(result == SUCCESS)
                          {
                              scale_index++;
                              KeyWakeup = 0;
                          }
                          break;
              
                      default:
                          break;
                  }
              
              }
              
              /*********************************************************************
              **  toascii
              *********************************************************************/
              uint8_t toascii(uint32_t in, uint8_t unit)
              {
                  uint8_t tmp;
              
                  tmp = ascii[(in>>(unit*4))&0x0F];
                  return tmp;
              }
C51 COMPILER V9.52.0.0   MAIN_DEMO                                                         05/30/2019 12:42:07 PAGE 19  

              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    561    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      9      23
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
